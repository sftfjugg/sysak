---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/1/29 5:18 PM
---

require("class")
local statvfs = require "posix.sys.statvfs".statvfs
local pystring = require("pystring")
local system = require("system")
local CvProc = require("vproc")

local CprocMounts = class("proc_mounts", CvProc)

function CprocMounts:_init_(proto, pffi, pFile)
    CvProc._init_(self, proto, pffi, pFile or "/proc/mounts")
    self._counter = 0
    self._mpoints = {}
end

local function get_lines(fName)
    local lines = {}
    local fName = fName or "/proc/mounts"

    local f = assert(io.open(fName, "r"))
    for line in f:lines() do
        table.insert(lines, line)
    end
    return lines
end

local function insert_point(tIn, ps)
    local ret = pystring:split(ps, " ", 3)
    tIn[ret[2]] = ret[1]
end

local function insert_dev_point(tIn, tDev, ps)
    local ret = pystring:split(ps, " ", 3)
    if system:valueIsIn(tDev, ret[1]) then
        return
    end
    table.insert(tDev, ret[1])
    tIn[ret[2]] = ret[1]
end

local function get_point(fName)
    local lines = get_lines(fName)
    local lOut = {"devtmpfs", "tmpfs", "shm"}
    local tDev = {}
    local ret = {}
    for _, line in ipairs(lines) do
        for _, t in ipairs(lOut) do
            if pystring:startswith(line, t) then
                insert_point(ret, line)
                goto continue
            end
        end
        if pystring:startswith(line, "/dev/") then
            insert_dev_point(ret, tDev, line)
        end
        ::continue::
    end
    if not system:keyIsIn(ret, "/") then
        ret["/"] = "root"
    end
    return ret
end

function CprocMounts:checkCount()
    if self._counter == 0 then
        self._mpoints = get_point()
    end
    self._counter = self._counter + 1
    if self._counter > 60 then
        self._counter = 0
    end
end

function CprocMounts:_proc()
    for k, v in pairs(self._mpoints) do
        local stat = statvfs(k)
        local ls = {
            {
                name = "fs",
                index = v,
            },
            {
                name = "mount",
                index = k,
            },
        }
        local vs = {
            { name="f_bsize", value=stat.f_bsize, },
            { name="f_blocks", value=stat.f_blocks, },
            { name="f_bfree", value=stat.f_bfree, },
            { name="f_bavail", value=stat.f_bavail, },
            { name="f_files", value=stat.f_files, },
            { name="f_ffree", value=stat.f_ffree, },
            { name="f_favail", value=stat.f_favail, },
        }
        local line = self:_packProto("fs_stat", ls, vs)
        self:appendLine(line)
    end
end

function CprocMounts:proc(elapsed, lines)
    self:checkCount()

    CvProc.proc(self)
    self:_proc()
    return self:push(lines)
end

return CprocMounts