---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/3/8 2:32 PM
---

require("common.class")
local pystring = require("common.pystring")
local CvProc = require("collector.vproc")
local root = "sys/fs/cgroup/cpuacct"
local dfile = "/cpuacct.proc_stat"

local CgProcStat = class("cg_proc_stat", CvProc)

--ls{}, (pod_name and docker_name
function CgProcStat:_init_(proto, pffi, mnt, path, ls)
    CvProc._init_(self, proto, pffi, mnt, root .. path .. dfile)
	self.ls = ls
	self.path = mnt..root..path..dfile
end

function CgProcStat:proc(elapsed, lines)
	-- if pFile not valid ,return -1
--[[    local ftype = io.type(self.pFile)

    if ftype == nil then
	print "type is nil"
	return
    else
	print (io.type(self.pFile))
	return
    end
    if ftype ~= "file" then
	return
    end
--]]
    local c = 1
    CvProc.proc(self)
    local values = {}
    for line in io.lines(self.pFile) do
	local tmp
	local cell = pystring:split(line)
	local num = #cell
	if string.find(line, "load average", 1) then
		if string.find(line, "running", 1) then
			tmp = "r_load"
		else
			tmp = "load"
		end
		if string.find(line, "%(1min", 1) then
			tmp = tmp.."1min"
		elseif string.find(line, "%(15min", 1) then
			tmp = tmp.."15min"
		elseif string.find(line, "%(5min", 1) then
			tmp = tmp.."5min"
		end
        	values[c] = {
       			name = tmp,
			value = tonumber(cell[num])
        	}
	else
		tmp = cell[1]
		values[c] = {
			name = tmp,
			value = tonumber(cell[num])
		}
	end
        c = c + 1
    end
    self:appendLine(self:_packProto("cg_proc_stat", self.ls, values))
    self:push(lines)
end

return CgProcStat
