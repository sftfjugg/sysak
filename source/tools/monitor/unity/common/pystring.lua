---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2022/12/8 10:37 AM
---

local pystring = {}

local function formatKey(key)
    local t = type(key)
    if t == "number" then
        return "["..key.."]"
    elseif t == "string" then
        local n = tonumber(key)
        if n then
            return "["..key.."]"
        end
    end
    return key
end

local function newStack()
    local stack = {
        tableList = {}
    }
    function stack:push(t)
        table.insert(self.tableList, t)
    end
    function stack:pop()
        return table.remove(self.tableList)
    end
    function stack:contains(t)
        for _, v in ipairs(self.tableList) do
            if v == t then
                return true
            end
        end
        return false
    end
    return stack
end

local function checkDelimiter(ch)
    local s = "().%+-*?[^$"
    for c in string.gmatch(s, ".") do
        if c == ch then
            return "%" .. ch
        end
    end
    return ch
end

local function setupDelimiter(delimiter)
    local rt = {}
    for c in string.gmatch(delimiter, ".") do
        table.insert(rt, checkDelimiter(c))
    end
    return table.concat(rt)
end

local function checkChar(ch)
    if ch == " " then
        return "%s"
    end
    return checkDelimiter(ch)
end

local function setupPatten(str)
    local rt = {}
    for c in string.gmatch(str, ".") do
        table.insert(rt, checkChar(c))
    end
    return '[' .. table.concat(rt) .. ']'
end

function pystring:split(s, delimiter, n)
    local result = {}
    local delimiter = setupDelimiter(delimiter or " ")
    local n = n or 2 ^ 63 - 1

    local nums = 0
    local beg = 1
    while (true) do
        local iBeg, iEnd = string.find(s, delimiter, beg)
        if (iBeg) then
            table.insert(result, string.sub(s, beg, iBeg - 1))
            beg = iEnd + 1
            nums = nums + 1
            if nums >= n then
                table.insert(result, string.sub(s, beg, string.len(s)))
                break
            end
        else
            table.insert(result, string.sub(s, beg, string.len(s)))
            break
        end
    end
    return result
end

function pystring:reverseTable(t)
    local n = #t
    for i = 1, n / 2 do
        t[i], t[n + 1 - i] = t[n + 1 - i], t[i]
    end
end

function pystring:rsplit(s, delimiter, n)
    local result = {}
    local delimiter = setupDelimiter(delimiter or " ")
    local n = n or 2 ^ 63 - 1

    local len = string.len(s) + 1
    local rs = string.reverse(s)
    local rDel = string.reverse(delimiter)
    local nums = 0
    local beg = 1

    while (true) do
        local iBeg, iEnd = string.find(rs, rDel, beg)
        if (iBeg) then
            table.insert(result, string.sub(s, len - (iBeg - 1),len - beg))
            beg = iEnd + 1
            nums = nums + 1
            if nums >= n then
                table.insert(result, string.sub(s, 1, len - beg))
                break
            end
        else
            table.insert(result, string.sub(s, 1, len - beg))
            break
        end
    end
    --return result
    pystring:reverseTable(result)
    return result
end

function pystring:lstrip(s, chars)
    chars = chars or " "

    local patten = "^" .. setupPatten(chars) .. "+"
    local _, ends = string.find(s, patten)
    if ends then
        return string.sub(s, ends + 1, -1)
    else
        return s
    end
end

function pystring:rstrip(s, chars)
    chars = chars or " "

    local patten = setupPatten(chars) .. "+$"
    local last = string.find(s, patten)
    if last then
        return string.sub(s, 1, last - 1)
    else
        return s
    end
end

function pystring:strip(s, chars)
    chars = chars or " \n\t"
    local res = pystring:lstrip(s, chars)
    return pystring:rstrip(res, chars)
end

function pystring:join(delim, strings)
    return table.concat(strings, delim)
end

function pystring:startswith(s1, s2)
    return string.sub(s1,1,string.len(s2)) == s2
end

function pystring:endswith(s1, s2)
    return s2=='' or string.sub(s1,-string.len(s2)) == s2
end

return pystring
