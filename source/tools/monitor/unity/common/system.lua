---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2022/12/16 10:58 PM
---

local socket = require("socket")
local serpent = require("common.serpent")

local system = {}

function system:sleep(t)
    socket.select(nil, nil, t)
end

function system:deepcopy(object)
    local lookup_table = {}
    local function _copy(object)
        if type(object) ~= "table" then
            return object
        elseif lookup_table[object] then
            return lookup_table[object]
        end
        local new_table = {}
        lookup_table[object] = new_table
        for index, value in pairs(object) do
            new_table[_copy(index)] = _copy(value)
        end
        return setmetatable(new_table, getmetatable(object))
    end

    return _copy(object)
end

function system:dump(t)
    return serpent.block(t)
end

function system:keyIsIn(tbl, key)
    if type(tbl) ~= "table" then
        return false
    end
    if tbl[key] == nil then
        return false
    else
        return true
    end
end

function system:valueIsIn(tbl, value)
    if type(tbl) ~= "table" then
        return false
    end
    for _, v in pairs(tbl) do
        if v == value then
            return true
        end
    end
    return false
end

function system:valueIndex(tbl, value)
    if type(tbl) ~= "table" then
        return 0
    end
    for i, v in ipairs(tbl) do
        if v == value then
            return i
        end
    end
    return 0
end

function system:keyCount(tbl)
    local count = 0
    for _, _ in pairs(tbl) do
        count = count + 1
    end
    return count
end

function system:dictCopy(tbl)
    local cp = {}
    assert(type(tbl) == "table")

    for k, v in pairs(tbl) do
        cp[k] = v
    end
    return cp
end

function system:hex2ups(hex)
    return (string.gsub(hex, ".", function (c)
        return string.format("%02X", string.byte(c))
    end))
end

function system:hex2lows(hex)
    return (string.gsub(hex, ".", function (c)
        return string.format("%02x", string.byte(c))
    end))
end

function system:hexdump(buf)
    for byte=1, #buf, 16 do
        local chunk = buf:sub(byte, byte+15)
        io.write(string.format('%08X  ',byte-1))
        chunk:gsub('.', function (c) io.write(string.format('%02X ',string.byte(c))) end)
        io.write(string.rep(' ',3*(16-#chunk)))
        io.write(' ',chunk:gsub('%c','.'),"\n")
    end
end

function system:timeRfc1123(t)
    t = t or os.time()
    return os.date("!%a, %d %b %Y %H:%M:%S GMT", t)
end

function system:parseYaml(fYaml)
    local lyaml = require("lyaml")
    local f = io.open(fYaml,"r")
    local s = f:read("*all")
    f:close()

    return lyaml.load(s)
end

function system:posixError(msg, err, errno)
    local s = msg .. string.format(": %s, errno: %d", err, errno)
    error(s)
end

return system