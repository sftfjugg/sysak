---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2022/12/26 11:26 PM
---
package.path = package.path .. ";../?.lua;"

local Cloop = require("collector.loop")
local system = require("common.system")
local ptime = require("posix.time")

local function setupFreq(fYaml)
    local conf = system:parseYaml(fYaml)
    if conf then
        local ret = tonumber(conf.config.freq)
        if ret > 5 then
            return conf.config.freq
        else
            return 5
        end
    else
        error("load yaml file failed.")
        return -1
    end
end

local function calcSleep(hope, now)
    if hope.tv_nsec >= now.tv_nsec then
        return {tv_sec  = hope.tv_sec - now.tv_sec,
                tv_nsec = hope.tv_nsec - now.tv_nsec}
    else
        return {tv_sec  = hope.tv_sec - now.tv_sec - 1,
                tv_nsec = 1e9 + hope.tv_nsec - now.tv_nsec}
    end
end

function work(que, proto_q, yaml)
    local fYaml = yaml or "../collector/plugin.yaml"
    local w = Cloop.new(que, proto_q, fYaml)
    local unit = setupFreq(fYaml)
    local tStart = ptime.clock_gettime(ptime.CLOCK_MONOTONIC)
    while true do
        local now = ptime.clock_gettime(ptime.CLOCK_MONOTONIC)
        local hope = {tv_sec = tStart.tv_sec + unit, tv_nsec = tStart.tv_sec}
        local diff = calcSleep(hope, now)
        assert(diff.tv_sec >= 0)
        w:work(unit)
        local _, s, errno, _ = ptime.nanosleep(diff)
        if errno then   -- interrupt by signal
            print(string.format("new sleep stop. %d, %s", errno, s))
            return 0
        end
        tStart = hope
    end
end
