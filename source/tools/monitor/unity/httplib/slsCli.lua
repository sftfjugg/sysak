---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/1/30 3:06 PM
---

require("class")

local sha1 = require("sha1")
local lz4 = require("lz4")
local md5 = require("md5")
local base64 = require("base64")
local system = require("system")
local pystring = require("pystring")
local pb = require("pb")
local protoc = require("protoc")

local ChttpCli = require("httpCli")
local CslsCli = class("slsCli", ChttpCli)

function CslsCli:_init_(endPoint, project, store, key, pswd)
    ChttpCli._init_(self)
    self._endPoint = endPoint
    self._project = project
    self._store = store
    self._key = key
    self._pswd = pswd
    self._pc = self:_setupPb()
end

local function packLog(vm, log)
    local Log = {
        Time = os.time(),
        Contents = {
            {
                Key = "log",
                Value = log,
            },
            {
                Key = "vm",
                Value = vm,
            },
        },
    }
    local LogGroup = {
        Logs = {Log, },
        Source = "sysak mon.",
    }
    return {
        logGroupList = {LogGroup,},
    }
end

local function packHead(data, rawSize, project, endPoint)
    return {
        ["Content-Type"] = "application/x-protobuf",
        ["Content-Length"] = #data,
        ["Content-MD5"] = system:hex2ups(md5.sum(data)),
        ["Date"] = system:timeRfc1123(),
        ["Host"] = project .. "." .. endPoint,
        ["x-log-apiversion"] = "0.6.0",
        ["x-log-bodyrawsize"] = rawSize,
        ["x-log-compresstype"] = "lz4",
        ["x-log-signaturemethod"] = "hmac-sha1",
    }
end

function CslsCli:signature(heads, uri, msg)
    local messages = {   -- refer to https://help.aliyun.com/document_detail/29012.htm?spm=a2c4g.11186623.0.0.359420a20m9Obu#section-8e1-lk0-m0z
        "POST",
        heads["Content-MD5"],
        heads["Content-Type"],
        heads["Date"],
        "x-log-apiversion:0.6.0",
        string.format("x-log-bodyrawsize:%d", #msg),
        "x-log-signaturemethod:hmac-sha1",
        uri,
    }
    local message = pystring:join("\n", messages)
    local sign = base64.encode(sha1.hmac_binary(self._pswd, message))
    heads["Authorization"] = string.format("LOG %s:%s", self._key, sign)
end

function CslsCli:putLog(vm, log)
    local uri = "/logstores/" .. self._store
    local logList = packLog(vm, log)
    local msg = assert(pb.encode("LogGroupList", logList))
    local body = lz4.compress(msg)
    local heads = packHead(body, #msg, self._project, self._endPoint)
    self:signature(heads, uri, msg)
    local url = string.format("http://%s", self._endPoint)
    print(system:dump(heads))
    local res = self:post(url, body, heads)
    print(system:dump(res))
end

function CslsCli:_setupPb()
    local pc = protoc:new()
    local format = [[
message Log
{
    required uint32 Time = 1;
    message Content
    {
        required string Key = 1;
        required string Value = 2;
    }
    repeated Content Contents = 2;
}

message LogTag
{
    required string Key = 1;
    required string Value = 2;
}

message LogGroup
{
    repeated Log Logs= 1;
    optional string Reserved = 2;
    optional string Topic = 3;
    optional string Source = 4;
    repeated LogTag LogTags = 6;
}

message LogGroupList
{
    repeated LogGroup logGroupList = 1;
}
]]
    assert(pc:load(format))
    return pc
end

return CslsCli