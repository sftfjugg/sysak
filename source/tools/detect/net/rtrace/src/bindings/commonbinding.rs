/* automatically generated by rust-bindgen 0.59.2 */

pub type u8_ = ::std::os::raw::c_uchar;
pub type u16_ = ::std::os::raw::c_ushort;
pub type u32_ = ::std::os::raw::c_uint;
pub type u64_ = ::std::os::raw::c_ulonglong;
pub const EVENT_UNKNOWN: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addr_pair {
    pub saddr: u32_,
    pub daddr: u32_,
    pub sport: u16_,
    pub dport: u16_,
}
#[test]
fn bindgen_test_layout_addr_pair() {
    assert_eq!(
        ::std::mem::size_of::<addr_pair>(),
        12usize,
        concat!("Size of: ", stringify!(addr_pair))
    );
    assert_eq!(
        ::std::mem::align_of::<addr_pair>(),
        4usize,
        concat!("Alignment of ", stringify!(addr_pair))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addr_pair>())).saddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(addr_pair),
            "::",
            stringify!(saddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addr_pair>())).daddr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(addr_pair),
            "::",
            stringify!(daddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addr_pair>())).sport as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(addr_pair),
            "::",
            stringify!(sport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addr_pair>())).dport as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(addr_pair),
            "::",
            stringify!(dport)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event {
    pub event_type: u8_,
}
#[test]
fn bindgen_test_layout_event() {
    assert_eq!(
        ::std::mem::size_of::<event>(),
        1usize,
        concat!("Size of: ", stringify!(event))
    );
    assert_eq!(
        ::std::mem::align_of::<event>(),
        1usize,
        concat!("Alignment of ", stringify!(event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).event_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(event_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct filter {
    pub pid: u32_,
    pub protocol: u16_,
    pub ap: addr_pair,
}
#[test]
fn bindgen_test_layout_filter() {
    assert_eq!(
        ::std::mem::size_of::<filter>(),
        20usize,
        concat!("Size of: ", stringify!(filter))
    );
    assert_eq!(
        ::std::mem::align_of::<filter>(),
        4usize,
        concat!("Alignment of ", stringify!(filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<filter>())).pid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(filter),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<filter>())).protocol as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(filter),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<filter>())).ap as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(filter),
            "::",
            stringify!(ap)
        )
    );
}
